#!/usr/bin/env python3
"""
MCP Knowledge Synchronization Script
April 18, 2025

This script synchronizes the Model Context Protocol (MCP) knowledge base files
across different AI assistants and ensures they are properly synced to iCloud.
"""

import os
import shutil
import subprocess
import datetime
import json
import hashlib
from pathlib import Path

# Configuration
PROJECT_ROOT = Path('/Users/ryansage/Documents/Arduino/esp-gpt-i2c')
KNOWLEDGE_BASE = PROJECT_ROOT / 'docs' / 'mcp_knowledge_base.md'
KNOWLEDGE_MODULES = PROJECT_ROOT / 'docs' / 'knowledge_modules'
ICLOUD_SYNC_DIR = Path('~/Library/Mobile Documents/com~apple~CloudDocs/Projects/ESP32').expanduser()

# Ensure required directories exist
ICLOUD_SYNC_DIR.mkdir(parents=True, exist_ok=True)

def compute_hash(file_path):
    """Compute SHA-256 hash of a file"""
    hash_sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b''):
            hash_sha256.update(chunk)
    return hash_sha256.hexdigest()

def sync_knowledge_base():
    """Synchronizes the main knowledge base with all knowledge modules"""
    print(f"üìö Syncing knowledge base at {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Read all knowledge modules
    module_content = {}
    modules = list(KNOWLEDGE_MODULES.glob('*.md'))
    
    if not modules:
        print("‚ö†Ô∏è No knowledge modules found. Nothing to synchronize.")
        return
    
    print(f"üìÇ Found {len(modules)} knowledge modules")
    
    for module_path in modules:
        module_name = module_path.stem
        with open(module_path, 'r') as f:
            module_content[module_name] = f.read()
    
    # Create a header for the consolidated knowledge base
    header = f"""# ESP32 ArtNet Controller: Consolidated MCP Knowledge Base
Last updated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

This document is auto-generated from individual knowledge modules.
Source repository: esp-gpt-i2c
Do not edit this file directly - changes will be overwritten.

## Table of Contents

"""
    
    # Add table of contents
    for module_name in sorted(module_content.keys()):
        pretty_name = module_name.replace('_', ' ').title()
        header += f"- [{pretty_name}](#{module_name})\n"
    
    # Combine all modules with section dividers
    combined_content = header + "\n\n"
    
    for module_name in sorted(module_content.keys()):
        pretty_name = module_name.replace('_', ' ').title()
        module_text = module_content[module_name]
        
        # Strip the first heading (we'll replace it)
        if module_text.startswith('# '):
            module_text = module_text[module_text.find('\n')+1:]
        
        section = f"<a id='{module_name}'></a>\n\n## {pretty_name}\n\n"
        section += module_text
        section += "\n\n---\n\n"
        
        combined_content += section
    
    # Add footer with metadata
    footer = f"""## Metadata

- **Generated by**: sync_mcp_knowledge.py
- **Date**: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Source modules**: {", ".join(sorted(module_content.keys()))}
- **Repository**: esp-gpt-i2c
"""
    
    combined_content += footer
    
    # Write the consolidated knowledge base
    with open(KNOWLEDGE_BASE, 'w') as f:
        f.write(combined_content)
    
    print(f"‚úÖ Knowledge base updated with content from {len(module_content)} modules")
    
    # Sync to iCloud
    sync_to_icloud()
    
    return combined_content

def sync_to_icloud():
    """Sync knowledge base and modules to iCloud"""
    try:
        # Copy main knowledge base to iCloud
        shutil.copy2(KNOWLEDGE_BASE, ICLOUD_SYNC_DIR / KNOWLEDGE_BASE.name)
        
        # Create modules directory in iCloud if it doesn't exist
        icloud_modules_dir = ICLOUD_SYNC_DIR / 'knowledge_modules'
        icloud_modules_dir.mkdir(exist_ok=True)
        
        # Copy all modules to iCloud
        for module_path in KNOWLEDGE_MODULES.glob('*.md'):
            shutil.copy2(module_path, icloud_modules_dir / module_path.name)
        
        print(f"‚òÅÔ∏è Synchronized to iCloud at {ICLOUD_SYNC_DIR}")
        return True
    except Exception as e:
        print(f"‚ùå Error synchronizing to iCloud: {e}")
        return False

def update_metadata():
    """Update metadata file with information about the knowledge base"""
    metadata = {
        "last_updated": datetime.datetime.now().isoformat(),
        "modules": [m.stem for m in KNOWLEDGE_MODULES.glob('*.md')],
        "knowledge_base_hash": compute_hash(KNOWLEDGE_BASE),
        "icloud_synced": os.path.exists(ICLOUD_SYNC_DIR / KNOWLEDGE_BASE.name)
    }
    
    metadata_file = PROJECT_ROOT / 'docs' / 'mcp_metadata.json'
    with open(metadata_file, 'w') as f:
        json.dump(metadata, f, indent=2)
    
    print(f"üìä Updated metadata at {metadata_file}")

def main():
    """Main function to run the synchronization process"""
    print("üîÑ Starting MCP Knowledge Synchronization")
    
    # Perform the synchronization
    sync_knowledge_base()
    
    # Update metadata
    update_metadata()
    
    print("‚ú® Knowledge synchronization complete")

if __name__ == "__main__":
    main()